{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\novak\\\\Documents\\\\MERN-Twitter-clone-main\\\\client\\\\src\\\\components\\\\Feed\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport axios from '../../api';\nimport Loading from '../Loading';\nimport PostTweet from '../PostTweet';\nimport Tweet from '../Tweet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Feed({\n  selectedNav\n}) {\n  _s();\n\n  const {\n    token\n  } = useSelector(state => state.user);\n  const [fetching, setFetching] = useState(false);\n  const [tweets, setTweets] = useState([]);\n  const [users, setUsers] = useState([]);\n  const {\n    id\n  } = useParams();\n  useEffect(() => {\n    (async () => {\n      setFetching(true);\n\n      try {\n        const response = await axios.get('/twitter/tweets', {\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        });\n        console.log(`✅ ${response.status} ${response.statusText}`);\n        setTweets(response.data.tweets);\n        setFetching(false);\n      } catch (error) {\n        console.error('❌', error);\n        setFetching(false);\n      }\n\n      try {\n        const response = await axios.get(`/twitter/profile/${id}`, {\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        });\n        console.log(`✅ ${response.status} ${response.statusText}`);\n        setUsers(response.data.user);\n      } catch (error) {\n        console.error('❌', error);\n      }\n    })(); // eslint-disable-next-line\n\n  }, []);\n  const componentStyles = {\n    flex: '1',\n    border: '0.5px solid #f5f5f5'\n  },\n        titleStyles = {\n    padding: '0.7em',\n    fontSize: '1.2em',\n    fontWeight: '900'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: componentStyles,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: titleStyles,\n      children: selectedNav\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), selectedNav === 'Home' ? /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(PostTweet, {\n        addTweet: tweet => setTweets([tweet, ...tweets])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: 'calc(100vh - 160px)'\n        },\n        className: \"scroll\",\n        children: fetching ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 25\n        }, this) : tweets.map(item => /*#__PURE__*/_jsxDEV(Tweet, {\n          tweet: item\n        }, item._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 60\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.box,\n      children: [/*#__PURE__*/_jsxDEV(ProfilePicture, {\n        image: users.profilePicture\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), console.log(users.tweets)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Feed, \"Rd60TqZBtymOAnEu6Qro+DvU2z8=\", true, function () {\n  return [useSelector];\n});\n\n_c = Feed;\n\nvar _c;\n\n$RefreshReg$(_c, \"Feed\");","map":{"version":3,"sources":["C:/Users/novak/Documents/MERN-Twitter-clone-main/client/src/components/Feed/index.js"],"names":["Fragment","useEffect","useState","useSelector","axios","Loading","PostTweet","Tweet","Feed","selectedNav","token","state","user","fetching","setFetching","tweets","setTweets","users","setUsers","id","useParams","response","get","headers","Authorization","console","log","status","statusText","data","error","componentStyles","flex","border","titleStyles","padding","fontSize","fontWeight","tweet","height","map","item","_id","styles","box","profilePicture"],"mappings":"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","sourcesContent":["import { Fragment, useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport axios from '../../api';\nimport Loading from '../Loading';\nimport PostTweet from '../PostTweet';\nimport Tweet from '../Tweet';\n\nexport default function Feed({ selectedNav }) {\n  const { token } = useSelector((state) => state.user);\n  const [fetching, setFetching] = useState(false);\n  const [tweets, setTweets] = useState([]);\n  const [users, setUsers] = useState([]);\n\n  const { id } = useParams();\n\n  useEffect(() => {\n    (async () => {\n      setFetching(true);\n      try {\n        const response = await axios.get('/twitter/tweets', {\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token,\n          },\n        });\n        console.log(`✅ ${response.status} ${response.statusText}`);\n        setTweets(response.data.tweets);\n        setFetching(false);\n      } catch (error) {\n        console.error('❌', error);\n        setFetching(false);\n      }\n\n      try  {\n        const response = await axios.get(`/twitter/profile/${id}`,  {\n           headers: {\n             'Content-Type': 'application/json',\n             Authorization: 'Bearer ' + token,\n           },\n         });\n         console.log(`✅ ${response.status} ${response.statusText}`);\n         setUsers(response.data.user);\n       } catch (error) {\n         console.error('❌', error);\n       }\n    })();\n    // eslint-disable-next-line\n  }, []);\n\n  const componentStyles = {\n      flex: '1',\n      border: '0.5px solid #f5f5f5',\n    },\n    titleStyles = {\n      padding: '0.7em',\n      fontSize: '1.2em',\n      fontWeight: '900',\n    };\n\n  return (\n    <div style={componentStyles}>\n      <div style={titleStyles}>{selectedNav}</div>\n\n      {selectedNav === 'Home' ? (\n        <Fragment>\n          {/* post tweet */}\n          <PostTweet addTweet={(tweet) => setTweets([tweet, ...tweets])} />\n\n          {/* tweets feed */}\n          <div style={{ height: 'calc(100vh - 160px)' }} className='scroll'>\n            {fetching ? <Loading /> : tweets.map((item) => <Tweet key={item._id} tweet={item} />)}\n          </div>\n        </Fragment>\n      ) : (\n        <div className={styles.box}>\n        <ProfilePicture image={users.profilePicture} />\n          { console.log(users.tweets)}\n          </div>\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}