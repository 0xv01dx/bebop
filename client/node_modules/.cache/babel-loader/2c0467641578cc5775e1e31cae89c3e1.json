{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\novak\\\\Documents\\\\MERN-Twitter-clone-main\\\\client\\\\src\\\\components\\\\ProtectedRoute\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { Route } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { login } from '../../actions/userActions';\nimport axios from '../../api';\nimport Loading from '../Loading';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ProtectedRoute({\n  Private,\n  Public,\n  ...rest\n}) {\n  _s();\n\n  const [isRequesting, setIsRequesting] = useState(true);\n  const {\n    isLoggedIn,\n    token\n  } = useSelector(state => state.user);\n  const dispatch = useDispatch(); // this side effect tries to fetch the user data,\n  // the server will validate the cookie and decide the fate of this route,\n  // if the validation passed, then the user will be stored in the global state, and the Private Component will render,\n  // if the validation failed, then the Public Component will be rendered\n\n  useEffect(() => {\n    (async () => {\n      if (token) try {\n        const response = await axios.get('/auth', {\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        });\n        dispatch(login({\n          user: response.data.user,\n          token: response.data.token\n        }));\n      } catch (error) {\n        console.error(error.message);\n      }\n      setIsRequesting(false);\n    })(); // eslint-disable-next-line\n\n  }, []);\n\n  if (isRequesting) {\n    return /*#__PURE__*/_jsxDEV(Loading, {\n      height: \"100vh\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Route, { ...rest,\n      render: props => isLoggedIn ? /*#__PURE__*/_jsxDEV(Private, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 62\n      }, this) : /*#__PURE__*/_jsxDEV(Public, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 76\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 12\n    }, this);\n  }\n}\n\n_s(ProtectedRoute, \"HVQvZCzs7I0jpoz0wn2VxomQJgo=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = ProtectedRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"sources":["C:/Users/novak/Documents/MERN-Twitter-clone-main/client/src/components/ProtectedRoute/index.js"],"names":["useEffect","useState","Route","useSelector","useDispatch","login","axios","Loading","ProtectedRoute","Private","Public","rest","isRequesting","setIsRequesting","isLoggedIn","token","state","user","dispatch","response","get","headers","Authorization","data","error","console","message","props"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,KAAT,QAAsB,2BAAtB;AACA,OAAOC,KAAP,MAAkB,WAAlB;AACA,OAAOC,OAAP,MAAoB,YAApB;;AAEA,eAAe,SAASC,cAAT,CAAwB;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,MAAX;AAAmB,KAAGC;AAAtB,CAAxB,EAAsD;AAAA;;AACnE,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM;AAAEa,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAAwBZ,WAAW,CAAEa,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAAzC;AACA,QAAMC,QAAQ,GAAGd,WAAW,EAA5B,CAHmE,CAKnE;AACA;AACA;AACA;;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACd,KAAC,YAAY;AACX,UAAIe,KAAJ,EACE,IAAI;AACF,cAAMI,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAU,OAAV,EAAmB;AACxCC,UAAAA,OAAO,EAAE;AACP,4BAAgB,kBADT;AAEPC,YAAAA,aAAa,EAAE,YAAYP;AAFpB;AAD+B,SAAnB,CAAvB;AAMAG,QAAAA,QAAQ,CAACb,KAAK,CAAC;AAAEY,UAAAA,IAAI,EAAEE,QAAQ,CAACI,IAAT,CAAcN,IAAtB;AAA4BF,UAAAA,KAAK,EAAEI,QAAQ,CAACI,IAAT,CAAcR;AAAjD,SAAD,CAAN,CAAR;AACD,OARD,CAQE,OAAOS,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAK,CAACE,OAApB;AACD;AAEHb,MAAAA,eAAe,CAAC,KAAD,CAAf;AACD,KAfD,IADc,CAiBd;;AACD,GAlBQ,EAkBN,EAlBM,CAAT;;AAoBA,MAAID,YAAJ,EAAkB;AAChB,wBAAO,QAAC,OAAD;AAAS,MAAA,MAAM,EAAC;AAAhB;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFD,MAEO;AACL,wBAAO,QAAC,KAAD,OAAWD,IAAX;AAAiB,MAAA,MAAM,EAAGgB,KAAD,IAAYb,UAAU,gBAAG,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cAAH,gBAAiB,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAhE;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;AACF;;GAlCuBN,c;UAEQL,W,EACbC,W;;;KAHKI,c","sourcesContent":["import { useEffect, useState } from 'react';\nimport { Route } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { login } from '../../actions/userActions';\nimport axios from '../../api';\nimport Loading from '../Loading';\n\nexport default function ProtectedRoute({ Private, Public, ...rest }) {\n  const [isRequesting, setIsRequesting] = useState(true);\n  const { isLoggedIn, token } = useSelector((state) => state.user);\n  const dispatch = useDispatch();\n\n  // this side effect tries to fetch the user data,\n  // the server will validate the cookie and decide the fate of this route,\n  // if the validation passed, then the user will be stored in the global state, and the Private Component will render,\n  // if the validation failed, then the Public Component will be rendered\n  useEffect(() => {\n    (async () => {\n      if (token)\n        try {\n          const response = await axios.get('/auth', {\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: 'Bearer ' + token,\n            },\n          });\n          dispatch(login({ user: response.data.user, token: response.data.token }));\n        } catch (error) {\n          console.error(error.message);\n        }\n\n      setIsRequesting(false);\n    })();\n    // eslint-disable-next-line\n  }, []);\n\n  if (isRequesting) {\n    return <Loading height='100vh' />;\n  } else {\n    return <Route {...rest} render={(props) => (isLoggedIn ? <Private /> : <Public />)} />;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}